{"version":3,"sources":["../../../../units/urb-example-todo-client/relay/ToDoListUpdateMarkAllMutation.js"],"names":["mutation","commit","environment","user","ToDos","ToDo_Complete","status","variables","input","updater","store","userProxy","get","id","connection","getConnection","ToDosEdges","getRootField","getLinkedRecord","getLinkedRecords","setLinkedRecords","optimisticUpdater","optimisticResponse","payload","Viewer","ToDo_CompletedCount","changedToDos","edges","filter","node","map","ToDo_TotalCount","ToDoListUpdateMarkAll"],"mappings":";;AAEA;AACA,6C,CAHA;;AAKA,MAAMA,iGAAN;;;;;;;;;;;;;;;;;;;;;;;;;;;AA2BA,SAASC,MAAT,CAAiBC,WAAjB,EAA8BC,IAA9B,EAAoCC,KAApC,EAA2CC,aAA3C,EAA0DC,MAA1D,EAAmE;AACjE,SAAO,gCAAgBJ,WAAhB,EAA6B;AAClCF,YADkC;AAElCO,eAAW;AACTC,aAAO,EAAEH,aAAF,EADE;AAETC,YAFS,EAFuB;;;AAOlCG,YAASC,KAAT,EAAiB;AACf,YAAMC,YAAYD,MAAME,GAAN,CAAWT,KAAKU,EAAhB,CAAlB;AACA,YAAMC,aAAa,gCAAkBC,aAAlB;AACjBJ,eADiB;AAEjB,sBAFiB;AAGjB,QAAEL,MAAF,EAHiB,CAAnB;;AAKA,YAAMU,aAAaN;AAChBO,kBADgB,CACF,uBADE;AAEhBC,qBAFgB,CAEC,QAFD;AAGhBA,qBAHgB,CAGC,OAHD,EAGU,EAAEZ,MAAF,EAHV;AAIhBa,sBAJgB,CAIE,OAJF,CAAnB;AAKAL,iBAAWM,gBAAX,CAA6BJ,UAA7B,EAAyC,OAAzC;AACD,KApBiC;;AAsBlCK,sBAAmBX,KAAnB,EAA2B;AACzB,YAAMC,YAAYD,MAAME,GAAN,CAAWT,KAAKU,EAAhB,CAAlB;AACA,YAAMC,aAAa,gCAAkBC,aAAlB;AACjBJ,eADiB;AAEjB,sBAFiB;AAGjB,QAAEL,MAAF,EAHiB,CAAnB;;;AAMA;AACID,uBAAiBC,WAAW,QAA9B;AACE,OAACD,aAAD,IAAkBC,WAAW,WAFjC;AAGE;AACAQ,mBAAWM,gBAAX,CAA4B,EAA5B,EAAgC,OAAhC;AACD;AACF,KApCiC;;AAsClCE,yBAAqB;AACnB,YAAMC,UAAU;AACdC,gBAAQ;AACNX,cAAIV,KAAKU,EADH;AAENY,+BAAqB,CAFf,EADM;;AAKdC,sBAAc,IALA,EAAhB;;;AAQA,UAAKtB,SAASA,MAAMuB,KAApB,EAA4B;AAC1BJ,gBAAQG,YAAR,GAAuBtB,MAAMuB,KAAN;AACpBC,cADoB,CACZ,CAAC,EAAEC,IAAF,EAAD,KAAcA,KAAKxB,aAAL,KAAuBA,aADzB;AAEpByB,WAFoB,CAEf,CAAC,EAAED,IAAF,EAAD,MAAe,EAAEhB,IAAIgB,KAAKhB,EAAX,EAAeR,aAAf,EAAf,CAFe,CAAvB;AAGD;;AAED,UAAKA,aAAL,EAAqB;AACnB,YAAKF,KAAK4B,eAAL,IAAwB,IAA7B,EAAoC;AAClCR,kBAAQC,MAAR,CAAeC,mBAAf,GAAqCtB,KAAK4B,eAA1C;AACD;AACF,OAJD,MAIO;AACLR,gBAAQC,MAAR,CAAeC,mBAAf,GAAqC,CAArC;AACD;;AAED,aAAO;AACLO,+BAAuBT,OADlB,EAAP;;AAGD,KAhEiC,EAA7B,CAAP;;AAkED,C;;AAEc,EAAEtB,MAAF,E","file":"ToDoListUpdateMarkAllMutation.js","sourcesContent":["// @flow weak\n\nimport { commitMutation, graphql } from 'react-relay'\nimport { ConnectionHandler } from 'relay-runtime'\n\nconst mutation = graphql`\n  mutation ToDoListUpdateMarkAllMutation(\n    $input: ToDoListUpdateMarkAllInput!\n    $status: String!\n  ) {\n    ToDoListUpdateMarkAll(input: $input) {\n      Viewer {\n        ToDos(status: $status) {\n          edges {\n            node {\n              id\n              ToDo_Complete\n              ToDo_Text\n            }\n          }\n        }\n        id\n        ToDo_CompletedCount\n      }\n      changedToDos {\n        id\n        ToDo_Complete\n      }\n    }\n  }\n`\n\nfunction commit( environment, user, ToDos, ToDo_Complete, status ) {\n  return commitMutation( environment, {\n    mutation,\n    variables: {\n      input: { ToDo_Complete },\n      status,\n    },\n\n    updater( store ) {\n      const userProxy = store.get( user.id )\n      const connection = ConnectionHandler.getConnection(\n        userProxy,\n        'ToDoList_ToDos',\n        { status }\n      )\n      const ToDosEdges = store\n        .getRootField( 'ToDoListUpdateMarkAll' )\n        .getLinkedRecord( 'Viewer' )\n        .getLinkedRecord( 'ToDos', { status })\n        .getLinkedRecords( 'edges' )\n      connection.setLinkedRecords( ToDosEdges, 'edges' )\n    },\n\n    optimisticUpdater( store ) {\n      const userProxy = store.get( user.id )\n      const connection = ConnectionHandler.getConnection(\n        userProxy,\n        'ToDoList_ToDos',\n        { status }\n      )\n\n      if (\n        ( ToDo_Complete && status === 'active' ) ||\n        ( !ToDo_Complete && status === 'completed' )\n      ) {\n        connection.setLinkedRecords([], 'edges' )\n      }\n    },\n\n    optimisticResponse() {\n      const payload = {\n        Viewer: {\n          id: user.id,\n          ToDo_CompletedCount: 0,\n        },\n        changedToDos: null,\n      }\n\n      if ( ToDos && ToDos.edges ) {\n        payload.changedToDos = ToDos.edges\n          .filter( ({ node }) => node.ToDo_Complete !== ToDo_Complete )\n          .map( ({ node }) => ({ id: node.id, ToDo_Complete }) )\n      }\n\n      if ( ToDo_Complete ) {\n        if ( user.ToDo_TotalCount != null ) {\n          payload.Viewer.ToDo_CompletedCount = user.ToDo_TotalCount\n        }\n      } else {\n        payload.Viewer.ToDo_CompletedCount = 0\n      }\n\n      return {\n        ToDoListUpdateMarkAll: payload,\n      }\n    },\n  })\n}\n\nexport default { commit }\n"]}