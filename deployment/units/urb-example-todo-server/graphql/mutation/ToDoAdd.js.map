{"version":3,"sources":["../../../../../units/urb-example-todo-server/graphql/mutation/ToDoAdd.js"],"names":["name","inputFields","ToDo_Text","type","outputFields","ToDosEdge","edgeType","resolve","local_id","context","rootValue","objectManager","args","an_Object","getOneObject","id","arr","getObjectList","ToDo_User_id","getViewerUserId","cursor","cursorForObjectInConnection","node","Viewer","parent","mutateAndGetPayload","add","ToDo_Complete"],"mappings":";;AAEA;AACA;;AAEA,0D;AACA,uF,yWANA;;AAQe,gDAA6B;AAC1CA,QAAM,SADoC;;AAG1CC,eAAa;AACXC,eAAW,EAAEC,MAAM,mDAAR,EADA,EAH6B;;;AAO1CC,gBAAc;AACZC,eAAW;AACTF,YAAM,0BAAgBG,QADb;AAETC,eAAS;AACP,QAAEC,QAAF,EADO;;AAGPC,aAHO;AAIP,QAAEC,WAAWC,aAAb,EAJO;AAKJ,WAHEC,IAGF;AACH,cAAMC,YAAY,MAAMF,cAAcG,YAAd,CAA4B,MAA5B,EAAoC;AAC1DC,cAAIP,QADsD,EAApC,CAAxB;;;AAIA,cAAMQ,MAAM,MAAML,cAAcM,aAAd,CAA6B,MAA7B,EAAqC;AACrDC,wBAAcP,cAAcQ,eAAd,EADuC,EAArC,CAAlB;;;AAIA,eAAO;AACLC,kBAAQT,cAAcU,2BAAd;AACN,gBADM;AAENL,aAFM;AAGNH,mBAHM,CADH;;AAMLS,gBAAMT,SAND,EAAP;;AAQD,OAxBQ,EADC;;;AA4BZU,YAAQ;AACNpB,gCADM;AAENI,eAAS,CAAEiB,MAAF,EAAUZ,IAAV,EAAgBH,OAAhB,EAAyB,EAAEC,WAAWC,aAAb,EAAzB;AACPA,oBAAcG,YAAd,CAA4B,MAA5B,EAAoC;AAClCC,YAAIJ,cAAcQ,eAAd,EAD8B,EAApC,CAHI,EA5BI,EAP4B;;;;;AA4C1CM,uBAAqB;AACnB,IAAEvB,SAAF,EADmB;AAEnBO,SAFmB;AAGnB,IAAEC,WAAWC,aAAb,EAHmB;AAIhB;AACH,UAAMH,WAAW,MAAMG,cAAce,GAAd,CAAmB,MAAnB,EAA2B;AAChDR,oBAAcP,cAAcQ,eAAd,EADkC;AAEhDjB,eAFgD;AAGhDyB,qBAAe,KAHiC,EAA3B,CAAvB;;AAKA,WAAO,EAAEnB,QAAF,EAAP;AACD,GAvDyC,EAA7B,C","file":"ToDoAdd.js","sourcesContent":["// @flow weak\n\nimport { mutationWithClientMutationId } from 'graphql-relay'\nimport { GraphQLString, GraphQLNonNull } from 'graphql'\n\nimport ToDosConnection from '../type/ToDosConnection'\nimport ViewerType from '../../../../units/urb-base-server/graphql/type/ViewerType'\n\nexport default mutationWithClientMutationId({\n  name: 'ToDoAdd',\n\n  inputFields: {\n    ToDo_Text: { type: new GraphQLNonNull( GraphQLString ) },\n  },\n\n  outputFields: {\n    ToDosEdge: {\n      type: ToDosConnection.edgeType,\n      resolve: async(\n        { local_id },\n        { ...args },\n        context,\n        { rootValue: objectManager }\n      ) => {\n        const an_Object = await objectManager.getOneObject( 'ToDo', {\n          id: local_id,\n        })\n\n        const arr = await objectManager.getObjectList( 'ToDo', {\n          ToDo_User_id: objectManager.getViewerUserId(),\n        })\n\n        return {\n          cursor: objectManager.cursorForObjectInConnection(\n            'ToDo',\n            arr,\n            an_Object\n          ),\n          node: an_Object,\n        }\n      },\n    },\n\n    Viewer: {\n      type: ViewerType,\n      resolve: ( parent, args, context, { rootValue: objectManager }) =>\n        objectManager.getOneObject( 'User', {\n          id: objectManager.getViewerUserId(),\n        }),\n    },\n  },\n\n  mutateAndGetPayload: async(\n    { ToDo_Text },\n    context,\n    { rootValue: objectManager }\n  ) => {\n    const local_id = await objectManager.add( 'ToDo', {\n      ToDo_User_id: objectManager.getViewerUserId(),\n      ToDo_Text,\n      ToDo_Complete: false,\n    })\n    return { local_id }\n  },\n})\n"]}