{"version":3,"sources":["../../../../../units/urb-example-todo-server/graphql/type/_ViewerFields.js"],"names":["ToDos","type","connectionType","args","status","defaultValue","resolve","obj","context","rootValue","objectManager","arr","getObjectList","filter","a_ToDo","ToDo_Complete","ToDo_TotalCount","length","ToDo_CompletedCount"],"mappings":";;AAEA;AACA;;AAEA,oD,mXALA;;AAOe;AACbA,SAAO;AACLC,UAAM,0BAAgBC,cADjB;;AAGLC;AACEC,cAAQ;AACNH,oCADM;AAENI,sBAAc,KAFR,EADV,iCAHK;;;;;AAWLC,aAAS,OAAOC,GAAP,QAAiCC,OAAjC,EAA0C,EAAEC,WAAWC,aAAb,EAA1C,KAA2E,KAA/D,EAAEN,MAAF,EAA+D,QAAlDD,IAAkD;AAClF,YAAMQ,MAAM,MAAMD,cAAcE,aAAd,CAA6B,MAA7B,EAAqC,EAArC,CAAlB;;AAEA,aAAO;AACLD,UAAIE,MAAJ,CAAYC,UAAUV,WAAW,KAAX,IAAoBU,OAAOC,aAAP,MAA2BX,WAAW,WAAtC,CAA1C,CADK;AAELD,UAFK,CAAP;;AAID,KAlBI,EADM;;;AAsBba,mBAAiB;AACff,6BADe;;AAGfK,aAAS,OAAOC,GAAP,SAAyBC,OAAzB,EAAkC,EAAEC,WAAWC,aAAb,EAAlC,KAAmE,KAAlDP,IAAkD;AAC1E,YAAMQ,MAAM,MAAMD,cAAcE,aAAd,CAA6B,MAA7B,EAAqC,EAArC,CAAlB;;AAEA,aAAOD,IAAIM,MAAX;AACD,KAPc,EAtBJ;;;AAgCbC,uBAAqB;AACnBjB,6BADmB;;AAGnBK,aAAS,OAAOC,GAAP,SAAyBC,OAAzB,EAAkC,EAAEC,WAAWC,aAAb,EAAlC,KAAmE,KAAlDP,IAAkD;AAC1E,YAAMQ,MAAM,MAAMD,cAAcE,aAAd,CAA6B,MAA7B,EAAqC,EAArC,CAAlB;;AAEA,aAAOD,IAAIE,MAAJ,CAAYC,UAAUA,OAAOC,aAA7B,EAA6CE,MAApD;AACD,KAPkB,EAhCR,E","file":"_ViewerFields.js","sourcesContent":["// @flow weak\n\nimport { GraphQLInt, GraphQLString } from 'graphql'\nimport { connectionArgs, connectionFromArray } from 'graphql-relay'\n\nimport ToDosConnection from './ToDosConnection'\n\nexport default {\n  ToDos: {\n    type: ToDosConnection.connectionType,\n\n    args: {\n      status: {\n        type: GraphQLString,\n        defaultValue: 'any',\n      },\n      ...connectionArgs,\n    },\n\n    resolve: async( obj, { status, ...args }, context, { rootValue: objectManager }) => {\n      const arr = await objectManager.getObjectList( 'ToDo', {})\n\n      return connectionFromArray(\n        arr.filter( a_ToDo => status === 'any' || a_ToDo.ToDo_Complete === ( status === 'completed' ) ),\n        args,\n      )\n    },\n  },\n\n  ToDo_TotalCount: {\n    type: GraphQLInt,\n\n    resolve: async( obj, { ...args }, context, { rootValue: objectManager }) => {\n      const arr = await objectManager.getObjectList( 'ToDo', {})\n\n      return arr.length\n    },\n  },\n\n  ToDo_CompletedCount: {\n    type: GraphQLInt,\n\n    resolve: async( obj, { ...args }, context, { rootValue: objectManager }) => {\n      const arr = await objectManager.getObjectList( 'ToDo', {})\n\n      return arr.filter( a_ToDo => a_ToDo.ToDo_Complete ).length\n    },\n  },\n}\n"]}