{"version":3,"sources":["../../../../../units/urb-example-inscriptio-server/graphql/mutation/InscriptioUpdate.js"],"names":["name","inputFields","id","type","Inscriptio_LocationLat","Inscriptio_LocationLon","Inscriptio_Notes","outputFields","Inscriptio","resolve","local_id","context","rootValue","objectManager","args","getOneObject","mutateAndGetPayload","update"],"mappings":";;AAEA;AACA;;AAEA,wD,iXALA;;AAOe,gDAA6B;AAC1CA,QAAM,kBADoC;;AAG1CC,eAAa;AACXC,QAAI,EAAEC,MAAM,+CAAR,EADO;AAEXC,4BAAwB,EAAED,MAAM,mDAAR,EAFb;AAGXE,4BAAwB,EAAEF,MAAM,mDAAR,EAHb;AAIXG,sBAAkB,EAAEH,MAAM,mDAAR,EAJP,EAH6B;;;AAU1CI,gBAAc;AACZC,gBAAY;AACVL,oCADU;AAEVM,eAAS;AACP,QAAEC,QAAF,EADO;;AAGPC,aAHO;AAIP,QAAEC,WAAWC,aAAb,EAJO,UAEFC,IAFE;AAKJD,wBAAcE,YAAd,CAA4B,YAA5B,EAA0C,EAAEb,IAAIQ,QAAN,EAA1C,CALI,GAFC,EADA,EAV4B;;;;AAsB1CM,uBAAqB;AACnB,IAAEd,EAAF,EAAME,sBAAN,EAA8BC,sBAA9B,EAAsDC,gBAAtD,EADmB;AAEnBK,SAFmB;AAGnB,IAAEC,WAAWC,aAAb,EAHmB;AAIhB;AACH,UAAMH,WAAW,gCAAcR,EAAd,EAAmBA,EAApC;;AAEA,UAAMW,cAAcI,MAAd,CAAsB,YAAtB,EAAoC;AACxCf,UAAIQ,QADoC;AAExCN,4BAFwC;AAGxCC,4BAHwC;AAIxCC,sBAJwC,EAApC,CAAN;;;AAOA,WAAO,EAAEI,QAAF,EAAP;AACD,GArCyC,EAA7B,C","file":"InscriptioUpdate.js","sourcesContent":["// @flow weak\n\nimport { fromGlobalId, mutationWithClientMutationId } from 'graphql-relay'\nimport { GraphQLString, GraphQLID, GraphQLNonNull } from 'graphql'\n\nimport InscriptioType from '../type/InscriptioType'\n\nexport default mutationWithClientMutationId({\n  name: 'InscriptioUpdate',\n\n  inputFields: {\n    id: { type: new GraphQLNonNull( GraphQLID ) },\n    Inscriptio_LocationLat: { type: new GraphQLNonNull( GraphQLString ) },\n    Inscriptio_LocationLon: { type: new GraphQLNonNull( GraphQLString ) },\n    Inscriptio_Notes: { type: new GraphQLNonNull( GraphQLString ) },\n  },\n\n  outputFields: {\n    Inscriptio: {\n      type: InscriptioType,\n      resolve: (\n        { local_id },\n        { ...args },\n        context,\n        { rootValue: objectManager }\n      ) => objectManager.getOneObject( 'Inscriptio', { id: local_id }),\n    },\n  },\n\n  mutateAndGetPayload: async(\n    { id, Inscriptio_LocationLat, Inscriptio_LocationLon, Inscriptio_Notes },\n    context,\n    { rootValue: objectManager }\n  ) => {\n    const local_id = fromGlobalId( id ).id\n\n    await objectManager.update( 'Inscriptio', {\n      id: local_id,\n      Inscriptio_LocationLat,\n      Inscriptio_LocationLon,\n      Inscriptio_Notes,\n    })\n\n    return { local_id }\n  },\n})\n"]}