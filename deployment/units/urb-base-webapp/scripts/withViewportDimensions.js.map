{"version":3,"sources":["../../../../units/urb-base-webapp/scripts/withViewportDimensions.js"],"names":["withViewportDimensions","WrappedComponent","dimensions","props","context","viewportDimensions","rbCtx","state","dimension","get","removeComponent","Component","contextTypes","object","isRequired","_handle_ViewportDimensionChange","setState"],"mappings":";;;;;;;AAOwBA,sB,CALxB,qC,mDACA,4B,46BAIe,QAASA,uBAAT;AACbC,gBADa;AAEbC,UAFa;AAGb;;AAEA;;;;;AAKE,gBAAaC,KAAb,CAA4BC,OAA5B,CAA8C;AACrCD,KADqC,CAC9BC,OAD8B;;AAGpCC,kBAHoC,CAGbD,QAAQE,KAHK,CAGpCD,kBAHoC;;AAK5C,GAAME,OAAQ,EAAd;;AAEA,kBAAuBL,UAAvB,mRAAUM,UAAV;AACED,MAAMC,SAAN,EAAmBH,mBAAmBI,GAAnB,OAA8BD,SAA9B,CAAnB,CADF;;AAGA,MAAKD,KAAL,CAAaA,KAAb,CAV4C;AAW7C,CAhBH;;;;;;;AAuByB;AACbF,kBADa,CACU,KAAKD,OAAL,CAAaE,KADvB,CACbD,kBADa;;AAGrBA,mBAAmBK,eAAnB,CAAoC,IAApC;AACD,CA3BH;;;;;;;;;;;;;AAwCW;AACP,GAAMP,OAAQ,SAAc,EAAd,CAAkB,KAAKI,KAAvB,CAA8B,KAAKJ,KAAnC,CAAd;;AAEA,MAAO,+BAAC,gBAAD,CAAsBA,KAAtB,CAAP;AACD,CA5CH,oBAAqB,gBAAMQ,SAA3B,SACSC,YADT,CACwB,CACpBN,MAAO,oBAAUO,MAAV,CAAiBC,UADJ,CADxB,mEA6BEC,+BA7BF,CA6BoC,UAAM,IAC9BV,mBAD8B,CACP,OAAKD,OAAL,CAAaE,KADN,CAC9BD,kBAD8B,CAGtC,GAAME,OAAQ,EAAd,CAEA,mBAAuBL,UAAvB,sSAAUM,UAAV,OACED,MAAMC,SAAN,EAAmBH,mBAAmBI,GAAnB,QAA8BD,SAA9B,CAAnB,CADF,CAGA,OAAKQ,QAAL,CAAeT,KAAf,EACD,CAtCH;;AA8CD","file":"withViewportDimensions.js","sourcesContent":["// @flow\n\nimport PropTypes from 'prop-types'\nimport React from 'react'\n\nimport type { ViewportDimensionType } from './ViewportDimensionType'\n\nexport default function withViewportDimensions(\n  WrappedComponent: Object,\n  dimensions: Array<ViewportDimensionType>\n) {\n  // ...and returns another component...\n  return class extends React.Component<Object, Object> {\n    static contextTypes = {\n      rbCtx: PropTypes.object.isRequired,\n    }\n\n    constructor( props: Object, context: Object ) {\n      super( props, context )\n\n      const { viewportDimensions } = context.rbCtx\n\n      const state = {}\n\n      for ( let dimension of dimensions )\n        state[dimension] = viewportDimensions.get( this, dimension )\n\n      this.state = state\n    }\n\n    // componentDidMount() {\n    //   // ... that takes care of the subscription...\n    //   DataSource.addChangeListener( this.handleChange )\n    // }\n\n    componentWillUnmount() {\n      const { viewportDimensions } = this.context.rbCtx\n\n      viewportDimensions.removeComponent( this )\n    }\n\n    _handle_ViewportDimensionChange = () => {\n      const { viewportDimensions } = this.context.rbCtx\n\n      const state = {}\n\n      for ( let dimension of dimensions )\n        state[dimension] = viewportDimensions.get( this, dimension )\n\n      this.setState( state )\n    }\n\n    render() {\n      const props = Object.assign({}, this.state, this.props )\n\n      return <WrappedComponent {...props} />\n    }\n  }\n}\n"]}