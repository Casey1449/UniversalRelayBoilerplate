{"version":3,"sources":["../../../units/urb-base-webapp/serverWebApp.js"],"names":["require","load","envHost","process","env","HOST","Error","envPort","PORT","envPortWebpack","PORT_WEBPACK","serverWebApp","gatherLocationAndSiteInformation","req","res","assetsPath","siteInformation","NODE_ENV","isSiteBuilderDisabled","inEditingMode","siteConfiguration","version","render","renderError","obj","error","status","log","use","fetcher","cookies","UserToken1","url","historyMiddlewares","routeConfig","resolver","redirect","element","userAgent","headers","siteConfigurationSubset","webapp","builder","sheets","helmet","rewind","rootHTML","renderToString","resolve","__dirname","assets_path","root_html","server_side_styles","toString","JSON","stringify","relay_payload","isJSON","send"],"mappings":"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","file":"serverWebApp.js","sourcesContent":["// @flow\n\nimport path from 'path'\n\nimport createRender from 'found/lib/createRender'\nimport { getFarceResult } from 'found/lib/server'\nimport express from 'express'\nimport Helmet from 'react-helmet'\nimport React from 'react'\nimport { JssProvider, SheetsRegistry } from 'react-jss'\nimport ReactDOMServer from 'react-dom/server'\nimport serialize from 'serialize-javascript'\n\nimport ErrorComponent from '../_configuration/urb-base-webapp/ErrorComponent'\nimport getGraphQLLocalServerURL from '../_configuration/urb-base-server/getGraphQLLocalServerURL'\nimport { getSiteInformation } from '../_configuration/urb-base-server/siteSettings'\nimport log from '../urb-base-server/log'\nimport { version } from '../_configuration/package'\nimport UserToken2ServerRendering from '../_configuration/urb-base-server/UserToken2ServerRendering'\n\nimport FetcherServer from './fetcherServer'\nimport { createResolver, historyMiddlewares, routeConfig } from './router'\nimport Wrapper from './components/Wrapper'\n\n// Read environment\nrequire( 'dotenv' ).load()\n\nconst envHost = process.env.HOST\nif ( envHost == null || typeof envHost !== 'string' )\n  throw new Error( 'ðŸ’”  urb-base-webapp requires the environment variable HOST to be set' )\nconst envPort = process.env.PORT\nif ( envPort == null || typeof envPort !== 'string' )\n  throw new Error( 'ðŸ’”  urb-base-webapp requires the environment variable PORT to be set' )\nconst envPortWebpack = process.env.PORT_WEBPACK\nif ( envPortWebpack == null || typeof envPortWebpack !== 'string' )\n  throw new Error( 'ðŸ’”  urb-base-webapp requires the environment variable PORT_WEBPACK to be set' ) // Create express router\nconst serverWebApp = express()\nasync function gatherLocationAndSiteInformation( req: Object, res: Object ) {\n  let assetsPath\n  const siteInformation = await getSiteInformation( req, res )\n  if ( process.env.NODE_ENV === 'production' ) {\n    assetsPath =\n      siteInformation.isSiteBuilderDisabled || siteInformation.inEditingMode\n        ? // When editing in production, use the assets with the configuration readign code intact (built when cutting a site version)\n          `/assets/${version}`\n        : // When in production mode, serve the assets compiled by factory's publisher\n          `/assets-site/${version}.${siteInformation.siteConfiguration.version}`\n  } else {\n    // When in development, always go to webpack over http\n    assetsPath = `http://${envHost}:${envPortWebpack}/${version}`\n  }\n  return { siteInformation, assetsPath }\n}\nconst render = createRender({\n  renderError( obj: Object ): React$Element<*> {\n    const { error } = obj\n    if ( error.status !== 404 )\n      log.log( 'error', 'Error: Render on server createRender renderError', obj )\n    return <ErrorComponent httpStatus={error.status} />\n  },\n})\nserverWebApp.use( async( req, res ) => {\n  try {\n    const { siteInformation, assetsPath } = await gatherLocationAndSiteInformation( req, res )\n    const fetcher = new FetcherServer(\n      `http://localhost:${envPort}` + getGraphQLLocalServerURL( siteInformation ),\n      req.cookies.UserToken1,\n      UserToken2ServerRendering,\n    )\n    const { redirect, element } = await getFarceResult({\n      url: req.url,\n      historyMiddlewares,\n      routeConfig,\n      resolver: createResolver( fetcher ),\n      render,\n    })\n    if ( redirect ) {\n      res.redirect( 302, redirect.url )\n      return\n    }\n    const userAgent = req.headers['user-agent']\n    const { siteConfiguration } = siteInformation\n    const siteConfigurationSubset = {\n      webapp: siteConfiguration.webapp,\n      builder: siteConfiguration.builder,\n    }\n    const sheets = new SheetsRegistry()\n    const helmet = Helmet.rewind()\n    const rootHTML = ReactDOMServer.renderToString(\n      <JssProvider registry={sheets}>\n        <Wrapper userAgent={userAgent} siteConfiguration={siteConfigurationSubset}>\n          {element}\n        </Wrapper>\n      </JssProvider>,\n    )\n    res.render( path.resolve( __dirname, 'html.ejs' ), {\n      assets_path: assetsPath,\n      root_html: rootHTML,\n      server_side_styles: sheets.toString(),\n      helmet,\n      siteConfiguration: JSON.stringify( siteConfigurationSubset ),\n      relay_payload: serialize( fetcher, { isJSON: true }),\n    })\n  } catch ( err ) {\n    log.log( 'error', 'Error: Render on server request', err )\n    res.status( 500 ).send( ReactDOMServer.renderToString( <ErrorComponent httpStatus={500} /> ) )\n  }\n})\nexport default serverWebApp\n"]}