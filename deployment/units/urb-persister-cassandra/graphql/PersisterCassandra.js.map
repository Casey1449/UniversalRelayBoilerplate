{"version":3,"sources":["../../../../units/urb-persister-cassandra/graphql/PersisterCassandra.js"],"names":["Uuid","types","Uuid_Null_String","Uuid_Null","fromString","ExpressCassandraClient","createClient","clientOptions","ormOptions","defaultReplicationStrategy","class","replication_factor","migration","disableTTYConfirmation","createKeyspace","PersisterCassandra","constructor","tableSchemas","Map","getOneObject","entityName","ObjectType","filters","resultPromises","filter","push","Promise","resolve","reject","updateUuidsInFields","instance","findOne","raw","allow_filtering","err","entity","all","getObjectList","find","arrEntities","arrRetObj","fields","schemaFields","_properties","schema","fieldName","fieldType","fieldValue","add","save","update","remove","delete","createLogger","uuidFromString","str","uuidRandom","random","uuidNull","uuidNullAsString","uuidToString","id","toString","uuidEquals","id1","id2","equals","addTableSchema","tableName","tableSchema","set","console","error","process","exit","confirmHealth","modelInstance","User","get_cql_client","client","execute","result","initialize","runAsPartOfSetupDatabase","cb","enrolledTables","connect","log","message","setTimeout","arrSchemas","keys","get","loadOneTableSchemaFromArray","length","splice","loadSchema","name"],"mappings":"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","file":"PersisterCassandra.js","sourcesContent":["// @flow\n\nimport CassandraDriver from 'cassandra-driver'\nimport ExpressCassandra from 'express-cassandra'\n\nimport CassandraOptions from './CassandraOptions'\nimport WinstonCassandra from './WinstonCassandra'\n\nconst Uuid = CassandraDriver.types.Uuid\nconst Uuid_Null_String = '00000000-0000-0000-0000-000000000000'\nconst Uuid_Null = Uuid.fromString( Uuid_Null_String )\n\nconst ExpressCassandraClient = ExpressCassandra.createClient({\n  clientOptions: CassandraOptions, // Options are pre-set in a separate part of the application, they are correct\n  ormOptions: {\n    defaultReplicationStrategy: {\n      class: 'SimpleStrategy',\n      replication_factor: 1,\n    },\n    migration: 'alter',\n    disableTTYConfirmation: true,\n    createKeyspace: true,\n  },\n})\n\nexport default class PersisterCassandra {\n  tableSchemas: ?Map<string, Object>\n\n  constructor() {\n    this.tableSchemas = new Map()\n  }\n\n  getOneObject(\n    entityName: string,\n    ObjectType: any,\n    filters: Array<any>\n  ): Promise<any> {\n    const resultPromises = []\n\n    for ( let filter of filters )\n      resultPromises.push(\n        new Promise( ( resolve, reject ) => {\n          this.updateUuidsInFields( entityName, filter )\n          ExpressCassandraClient.instance[entityName].findOne(\n            filter,\n            {\n              raw: true,\n              allow_filtering: true,\n            },\n            ( err, entity ) => {\n              if ( err ) reject( err )\n              else {\n                if ( entity != null ) resolve( new ObjectType( entity ) )\n                else resolve( null )\n              }\n            }\n          )\n        })\n      )\n\n    return Promise.all( resultPromises )\n  }\n\n  getObjectList(\n    entityName: string,\n    ObjectType: any,\n    filters: Array<any>\n  ): Promise<Array<any>> {\n    const resultPromises = []\n\n    for ( let filter of filters )\n      resultPromises.push(\n        new Promise( ( resolve, reject ) => {\n          this.updateUuidsInFields( entityName, filter )\n          ExpressCassandraClient.instance[entityName].find(\n            filter,\n            {\n              raw: true,\n              allow_filtering: true,\n            },\n            ( err, arrEntities ) => {\n              if ( err ) reject( err )\n              else {\n                const arrRetObj = []\n                for ( let entity of arrEntities )\n                  arrRetObj.push( new ObjectType( entity ) )\n                resolve( arrRetObj )\n              }\n            }\n          )\n        })\n      )\n\n    return Promise.all( resultPromises )\n  }\n\n  updateUuidsInFields( entityName: string, fields: any ) {\n    const schemaFields =\n      ExpressCassandraClient.instance[entityName]._properties.schema.fields\n    for ( let fieldName in fields ) {\n      const fieldType = schemaFields[fieldName]\n      if ( fieldType === 'uuid' ) {\n        const fieldValue = fields[fieldName]\n        if ( !( fieldValue instanceof Uuid ) )\n          fields[fieldName] = Uuid.fromString( fieldValue )\n      }\n    }\n  }\n\n  add( entityName: string, fields: any ): Promise<any> {\n    this.updateUuidsInFields( entityName, fields )\n\n    return new Promise( ( resolve, reject ) => {\n      const entity = new ExpressCassandraClient.instance[entityName]( fields )\n      entity.save( err => {\n        if ( err ) reject( err )\n        else resolve()\n      })\n    })\n  }\n\n  update( entityName: string, fields: any ): Promise<null> {\n    // TODO x2000 Optimize this with update, possibly. Maybe it's not so bad to read first after all\n    return this.add( entityName, fields )\n  }\n\n  remove( entityName: string, fields: any ): Promise<any> {\n    this.updateUuidsInFields( entityName, fields )\n\n    return new Promise( ( resolve, reject ) => {\n      ExpressCassandraClient.instance[entityName].delete( fields, err => {\n        if ( err ) reject( err )\n        else resolve()\n      })\n    })\n  }\n\n  createLogger() {\n    return new WinstonCassandra( CassandraOptions )\n  }\n\n  uuidFromString( str: string ) {\n    return Uuid.fromString( str )\n  }\n\n  uuidRandom() {\n    return Uuid.random()\n  }\n\n  uuidNull() {\n    return Uuid_Null\n  }\n\n  uuidNullAsString() {\n    return Uuid_Null_String\n  }\n\n  uuidToString( id: any ): string {\n    if ( id instanceof Uuid ) id = id.toString()\n\n    return id\n  }\n\n  uuidEquals( id1: any, id2: any ): boolean {\n    return id1.equals( id2 )\n  }\n\n  addTableSchema( tableName: string, tableSchema: Object ): void {\n    if ( this.tableSchemas ) this.tableSchemas.set( tableName, tableSchema )\n    else {\n      console.error(\n        '💔 Attempting to add table schemas after express-cassandra client connect.'\n      )\n      process.exit( 1 )\n    }\n  }\n\n  confirmHealth(): Promise<any> {\n    return new Promise( ( resolve, reject ) => {\n      ExpressCassandraClient.modelInstance.User.get_cql_client(\n        ( err, client ) => {\n          if ( err ) reject( err )\n          else\n            client.execute(\n              'select release_version from system.local;',\n              ( err, result ) => {\n                if ( err ) reject( err )\n                else resolve()\n              }\n            )\n        }\n      )\n    })\n  }\n\n  initialize( runAsPartOfSetupDatabase: boolean, cb: Function ): void {\n    // All table schemas should have been added by now.\n    const enrolledTables = this.tableSchemas\n    this.tableSchemas = null // Free up the memory that is not needed any more and indicate that we can not add any more\n\n    ExpressCassandraClient.connect( err => {\n      if ( err ) {\n        console.log( '💔 Could not connect to Cassandra: ' + err.message )\n        setTimeout( () => process.exit( 1 ), 5000 ) // Exit the process. A process manager like pm2 would re-start\n      } else if ( !enrolledTables ) console.log( '💔 Table schemas missing!' )\n      else {\n        const arrSchemas = []\n        for ( let tableName of enrolledTables.keys() )\n          arrSchemas.push([ tableName, enrolledTables.get( tableName ) ])\n\n        this.loadOneTableSchemaFromArray(\n          arrSchemas,\n          runAsPartOfSetupDatabase,\n          cb\n        )\n      }\n    })\n  }\n\n  loadOneTableSchemaFromArray(\n    arrSchemas: Array<any>,\n    runAsPartOfSetupDatabase: boolean,\n    cb: Function\n  ): void {\n    if ( arrSchemas.length > 0 ) {\n      const tableName = arrSchemas[0][0]\n      const tableSchema = arrSchemas[0][1]\n\n      arrSchemas.splice( 0, 1 )\n\n      ExpressCassandraClient.loadSchema( tableName, tableSchema, err => {\n        if ( err ) {\n          console.log(\n            '💔 Initializing Cassandra persister - error while creating ' +\n              tableName +\n              '!'\n          )\n          console.error( err.message )\n          process.exit( 1 )\n        } else {\n          if ( runAsPartOfSetupDatabase )\n            console.log(\n              '🛢 Table ' +\n                ExpressCassandraClient.modelInstance[tableName]._properties\n                  .name +\n                ' ready.'\n            )\n\n          this.loadOneTableSchemaFromArray(\n            arrSchemas,\n            runAsPartOfSetupDatabase,\n            cb\n          ) // Load the next table\n          return\n        }\n      })\n    } else {\n      cb()\n    }\n  }\n}\n"]}