{"version":3,"sources":["../../../units/urb-base-tools/build-units.js"],"names":["existsAsync","exists","readFileAsync","readFile","readdirAsync","readdir","sortObject","object","t","Object","keys","sort","forEach","k","orderPackages","packageAsObject","scripts","dependencies","devDependencies","mergeScripts","scripts1","scripts2","scriptName","script","script2","createPackageJson","units","packageJsonFileName","resolve","currentPackageAsJSONString","toString","currentPackageAsObject","JSON","parse","engines","name","version","unitName","packageAsObjectName","packageToAddAsObject","stringify","createMutations","mutationsImports","mutationsExports","endsWith","mutationsDir","mutationFileNames","mutationFileName","mutation","substring","length","push","replace","mutations","concat","format","join","createSchemas","schemasImports","schemasDir","objectTypeFileNames","objectTypeFileName","objectType","schemas","createViewerFields","viewerFieldsImports","viewerFieldsExports","viewerFieldsFileName","viewerFieldsImportName","viewerFields","createRoutes","routesAppFrameImports","routesRootImports","routesAppFrameExports","routesRootExports","routesDir","routeFileNames","routeFileName","startsWith","route","Promise","all","createRouteFile","fileName","imports","exports","routesAppFrame","getUnits","filter","main","taskPromises","then","console","log"],"mappings":"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","file":"build-units.js","sourcesContent":["// @flow\n\nimport fs from 'fs'\nimport path from 'path'\nimport { promisify } from 'util'\n\nimport prettier from 'prettier'\n\n// $FlowIssue Not sure why it gives an error. The file does exist\nimport prettierRC from '../../.prettierrc.json'\n\nimport ensureFileContent from './ensureFileContent'\n\nconst existsAsync = promisify( fs.exists )\nconst readFileAsync = promisify( fs.readFile )\nconst readdirAsync = promisify( fs.readdir )\n\nfunction sortObject( object: Object ) {\n  var t = {}\n  Object.keys( object )\n    .sort()\n    .forEach( function( k ) {\n      t[k] = object[k]\n    })\n  return t\n}\n\nfunction orderPackages( packageAsObject ) {\n  packageAsObject.scripts = sortObject( packageAsObject.scripts )\n  packageAsObject.dependencies = sortObject( packageAsObject.dependencies )\n  packageAsObject.devDependencies = sortObject( packageAsObject.devDependencies )\n}\n\nfunction mergeScripts( scripts1, scripts2 ) {\n  const scripts = Object.assign({}, scripts1 )\n\n  for ( let scriptName in scripts2 ) {\n    const script = scripts[scriptName]\n    const script2 = scripts2[scriptName]\n\n    if ( script && script2 ) {\n      scripts[scriptName] = script + ' && ' + script2\n    } else if ( script2 ) {\n      scripts[scriptName] = script2\n    }\n  }\n\n  return scripts\n}\n\nasync function createPackageJson( units: Array<string> ) {\n  const packageJsonFileName = path.resolve( './package.json' )\n  const currentPackageAsJSONString = ( await readFileAsync(\n    packageJsonFileName\n  ) ).toString()\n  const currentPackageAsObject = JSON.parse( currentPackageAsJSONString )\n  const packageAsObject = {\n    dependencies: {},\n    devDependencies: {},\n    engines: {},\n    name: null,\n    'lint-staged': {},\n    scripts: {},\n    version: null,\n  }\n\n  // Make sure not to overwrite version information\n  packageAsObject.version = currentPackageAsObject.version\n  packageAsObject.name = currentPackageAsObject.name\n\n  // Add packages to object\n  for ( let unitName of units ) {\n    const packageAsObjectName = path.resolve(\n      './units',\n      unitName,\n      'package.part.json'\n    )\n    if ( await existsAsync( packageAsObjectName ) ) {\n      const packageToAddAsObject = JSON.parse(\n        ( await readFileAsync( packageAsObjectName ) ).toString()\n      )\n\n      if ( packageToAddAsObject.dependencies )\n        Object.assign(\n          packageAsObject.dependencies,\n          packageToAddAsObject.dependencies\n        )\n      if ( packageToAddAsObject.devDependencies )\n        Object.assign(\n          packageAsObject.devDependencies,\n          packageToAddAsObject.devDependencies\n        )\n      if ( packageToAddAsObject.engines )\n        Object.assign( packageAsObject.engines, packageToAddAsObject.engines )\n      if ( packageToAddAsObject['lint-staged'])\n        Object.assign(\n          packageAsObject['lint-staged'],\n          packageToAddAsObject['lint-staged']\n        )\n      if ( packageToAddAsObject.scripts )\n        packageAsObject.scripts = mergeScripts(\n          packageAsObject.scripts,\n          packageToAddAsObject.scripts\n        )\n    }\n  }\n\n  // Make them pretty\n  orderPackages( packageAsObject )\n\n  await ensureFileContent(\n    packageJsonFileName,\n    currentPackageAsJSONString,\n    JSON.stringify( packageAsObject, null, 2 )\n  )\n}\n\nasync function createMutations( units: Array<string> ) {\n  const mutationsImports = []\n  const mutationsExports = []\n\n  for ( let unitName of units )\n    if ( unitName.endsWith( '-server' ) ) {\n      const mutationsDir = path.resolve( './units', unitName, 'graphql/mutation' )\n      if ( await existsAsync( mutationsDir ) ) {\n        const mutationFileNames = await readdirAsync( mutationsDir )\n\n        for ( let mutationFileName of mutationFileNames ) {\n          if ( mutationFileName.endsWith( '.js' ) ) {\n            const mutation = mutationFileName.substring(\n              0,\n              mutationFileName.length - 3\n            )\n            mutationsImports.push(\n              'import ' +\n                mutation.replace( '.', '_' ) +\n                ' from \\'../../../' +\n                unitName +\n                '/graphql/mutation/' +\n                mutation +\n                '\\''\n            )\n            mutationsExports.push( '  ' + mutation + ',' )\n          }\n        }\n      }\n    }\n\n  let mutations = [ '// @flow', '' ]\n  mutations = mutations.concat( mutationsImports )\n  mutations = mutations.concat([ '', 'export default {' ])\n  mutations = mutations.concat( mutationsExports )\n  mutations = mutations.concat([ '}' ])\n\n  await ensureFileContent(\n    path.resolve(\n      './units/_configuration/urb-base-server/graphql/_mutations.js'\n    ),\n    null,\n    prettier.format( mutations.join( '\\r\\n' ), prettierRC )\n  )\n}\n\nasync function createSchemas( units: Array<string> ) {\n  const schemasImports = []\n\n  for ( let unitName of units )\n    if ( unitName.endsWith( '-server' ) ) {\n      const schemasDir = path.resolve( './units', unitName, 'graphql/model' )\n      if ( await existsAsync( schemasDir ) ) {\n        const objectTypeFileNames = await readdirAsync( schemasDir )\n\n        for ( let objectTypeFileName of objectTypeFileNames ) {\n          if ( objectTypeFileName.endsWith( '.js' ) ) {\n            const objectType = objectTypeFileName.substring(\n              0,\n              objectTypeFileName.length - 3\n            )\n            schemasImports.push(\n              'import \\'../../../' +\n                unitName +\n                '/graphql/model/' +\n                objectType +\n                '\\''\n            )\n          }\n        }\n      }\n    }\n\n  let schemas = [ '// @flow', '' ]\n  schemas = schemas.concat( schemasImports )\n  schemas = schemas.concat([ '', 'export default true' ])\n\n  await ensureFileContent(\n    path.resolve( './units/_configuration/urb-base-server/graphql/_schemas.js' ),\n    null,\n    prettier.format( schemas.join( '\\r\\n' ), prettierRC )\n  )\n}\n\nasync function createViewerFields( units: Array<string> ) {\n  const viewerFieldsImports = []\n  const viewerFieldsExports = []\n\n  for ( let unitName of units )\n    if ( unitName.endsWith( '-server' ) ) {\n      const viewerFieldsFileName = path.resolve(\n        './units',\n        unitName,\n        'graphql/type/_ViewerFields.js'\n      )\n      if ( await existsAsync( viewerFieldsFileName ) ) {\n        const viewerFieldsImportName = unitName.replace( /-/g, '_' )\n        viewerFieldsImports.push(\n          'import ' +\n            viewerFieldsImportName +\n            ' from \\'../../../' +\n            unitName +\n            '/graphql/type/_ViewerFields\\''\n        )\n        viewerFieldsExports.push( '  ...' + viewerFieldsImportName + ',' )\n      }\n    }\n\n  let viewerFields = [ '// @flow', '' ]\n  viewerFields = viewerFields.concat( viewerFieldsImports )\n  viewerFields = viewerFields.concat([ '', 'export default {' ])\n  viewerFields = viewerFields.concat( viewerFieldsExports )\n  viewerFields = viewerFields.concat([ '}' ])\n\n  await ensureFileContent(\n    path.resolve(\n      './units/_configuration/urb-base-server/graphql/_ViewerFields.js'\n    ),\n    null,\n    prettier.format( viewerFields.join( '\\r\\n' ), prettierRC )\n  )\n}\n\nasync function createRoutes( units: Array<string> ) {\n  const routesAppFrameImports = []\n  const routesRootImports = []\n  const routesAppFrameExports = []\n  const routesRootExports = []\n\n  for ( let unitName of units )\n    if ( unitName.endsWith( '-webapp' ) ) {\n      const routesDir = path.resolve( './units', unitName )\n      if ( await existsAsync( routesDir ) ) {\n        const routeFileNames = await readdirAsync( routesDir )\n\n        for ( let routeFileName of routeFileNames ) {\n          if ( routeFileName.endsWith( '.jsx' ) )\n            if ( routeFileName.startsWith( 'routeAppFrame' ) ) {\n              const route = routeFileName.substring( 0, routeFileName.length - 4 )\n              routesAppFrameImports.push(\n                'import ' +\n                  route +\n                  ' from \\'../../' +\n                  unitName +\n                  '/' +\n                  route +\n                  '\\''\n              )\n              routesAppFrameExports.push( '  ' + route + ',' )\n            } else if ( routeFileName.startsWith( 'routeRoot' ) ) {\n              const route = routeFileName.substring( 0, routeFileName.length - 4 )\n              routesRootImports.push(\n                'import ' +\n                  route +\n                  ' from \\'../../' +\n                  unitName +\n                  '/' +\n                  route +\n                  '\\''\n              )\n              routesRootExports.push( '  ' + route + ',' )\n            }\n        }\n      }\n    }\n\n  await Promise.all([\n    createRouteFile(\n      path.resolve( './units/_configuration/urb-base-webapp/routesAppFrame.js' ),\n      routesAppFrameImports,\n      routesAppFrameExports\n    ),\n    createRouteFile(\n      path.resolve( './units/_configuration/urb-base-webapp/routesRoot.js' ),\n      routesRootImports,\n      routesRootExports\n    ),\n  ])\n}\n\nasync function createRouteFile(\n  fileName: string,\n  imports: Array<string>,\n  exports: Array<string>\n) {\n  let routesAppFrame = [ '// @flow', '' ]\n  routesAppFrame = routesAppFrame.concat( imports )\n  routesAppFrame = routesAppFrame.concat([ '', 'export default [' ])\n  routesAppFrame = routesAppFrame.concat( exports )\n  routesAppFrame = routesAppFrame.concat([ ']' ])\n\n  await ensureFileContent(\n    fileName,\n    null,\n    prettier.format( routesAppFrame.join( '\\r\\n' ), prettierRC )\n  )\n}\n\nasync function getUnits() {\n  const units = ( await readdirAsync( './units/' ) ).filter(\n    fileName => fileName !== '.DS_Store' && fileName !== '_configuration'\n  )\n  return units\n}\n\nasync function main() {\n  const units = await getUnits()\n\n  const taskPromises = [\n    createPackageJson( units ),\n    createViewerFields( units ),\n    createSchemas( units ),\n    createMutations( units ),\n    createRoutes( units ),\n  ]\n\n  await Promise.all( taskPromises )\n}\n\nmain().then( () => console.log( 'Fin.' ) )\n"]}