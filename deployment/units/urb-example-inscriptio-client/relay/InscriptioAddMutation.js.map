{"version":3,"sources":["../../../../units/urb-example-inscriptio-client/relay/InscriptioAddMutation.js"],"names":["mutation","sharedUpdater","store","user","InscriptiosEdge","userProxy","get","id","connection","getConnection","insertEdgeAfter","nextClientMutationId","commit","environment","Inscriptio_LocationLat","Inscriptio_LocationLon","Inscriptio_Notes","clientMutationId","variables","input","updater","payload","getRootField","getLinkedRecord","optimisticUpdater","aInscriptio","create","setValue","setLinkedRecord"],"mappings":";;AAEA;AACA,6C,CAHA;;AAKA,MAAMA,yFAAN;;;;;;;;;;;;;;;;;;;AAmBA,SAASC,aAAT,CAAwBC,KAAxB,EAA+BC,IAA/B,EAAqCC,eAArC,EAAuD;AACrD,QAAMC,YAAYH,MAAMI,GAAN,CAAWH,KAAKI,EAAhB,CAAlB;;AAEA,QAAMC,aAAa,gCAAkBC,aAAlB;AACjBJ,WADiB;AAEjB,8BAFiB,CAAnB;;AAIA,MAAKG,UAAL,EAAkB;AAChB,oCAAkBE,eAAlB,CAAmCF,UAAnC,EAA+CJ,eAA/C;AACD;AACF;;AAED,IAAIO,uBAAuB,CAA3B;;AAEA,SAASC,MAAT;AACEC,WADF;AAEEV,IAFF;AAGEW,sBAHF;AAIEC,sBAJF;AAKEC,gBALF;AAME;AACA,QAAMC,mBAAmBN,sBAAzB;;AAEA,SAAO,gCAAgBE,WAAhB,EAA6B;AAClCb,YADkC;AAElCkB,eAAW;AACTC,aAAO;AACLL,8BADK;AAELC,8BAFK;AAGLC,wBAHK;AAILC,wBAJK,EADE,EAFuB;;;;AAWlCG,YAASlB,KAAT,EAAiB;AACf,YAAMmB,UAAUnB,MAAMoB,YAAN,CAAoB,eAApB,CAAhB;AACArB,oBAAeC,KAAf,EAAsBC,IAAtB,EAA4BkB,QAAQE,eAAR,CAAyB,iBAAzB,CAA5B;AACD,KAdiC;;AAgBlCC,sBAAmBtB,KAAnB,EAA2B;AACzB,YAAMK,KAAM,mCAAkCU,gBAAiB,EAA/D;AACA,YAAMQ,cAAcvB,MAAMwB,MAAN,CAAcnB,EAAd,EAAkB,YAAlB,CAApB;AACAkB,kBAAYE,QAAZ,CAAsBb,sBAAtB,EAA8C,wBAA9C;AACAW,kBAAYE,QAAZ,CAAsBZ,sBAAtB,EAA8C,wBAA9C;AACAU,kBAAYE,QAAZ,CAAsBX,gBAAtB,EAAwC,kBAAxC;AACAS,kBAAYE,QAAZ,CAAsBpB,EAAtB,EAA0B,IAA1B;;AAEA,YAAMH,kBAAkBF,MAAMwB,MAAN;AACrB,8CAAuCT,gBAAiB,EADnC;AAEtB,uBAFsB,CAAxB;;AAIAb,sBAAgBwB,eAAhB,CAAiCH,WAAjC,EAA8C,MAA9C;;AAEAxB,oBAAeC,KAAf,EAAsBC,IAAtB,EAA4BC,eAA5B;AACD,KA/BiC,EAA7B,CAAP;;AAiCD,C;;AAEc,EAAEQ,MAAF,E","file":"InscriptioAddMutation.js","sourcesContent":["// @flow weak\n\nimport { commitMutation, graphql } from 'react-relay'\nimport { ConnectionHandler } from 'relay-runtime'\n\nconst mutation = graphql`\n  mutation InscriptioAddMutation($input: InscriptioAddInput!) {\n    InscriptioAdd(input: $input) {\n      Viewer {\n        id\n      }\n      InscriptiosEdge {\n        cursor\n        node {\n          id\n          Inscriptio_LocationLat\n          Inscriptio_LocationLon\n          Inscriptio_Notes\n        }\n      }\n    }\n  }\n`\n\nfunction sharedUpdater( store, user, InscriptiosEdge ) {\n  const userProxy = store.get( user.id )\n\n  const connection = ConnectionHandler.getConnection(\n    userProxy,\n    'InscriptioList_Inscriptios'\n  )\n  if ( connection ) {\n    ConnectionHandler.insertEdgeAfter( connection, InscriptiosEdge )\n  }\n}\n\nlet nextClientMutationId = 0\n\nfunction commit(\n  environment,\n  user,\n  Inscriptio_LocationLat,\n  Inscriptio_LocationLon,\n  Inscriptio_Notes\n) {\n  const clientMutationId = nextClientMutationId++\n\n  return commitMutation( environment, {\n    mutation,\n    variables: {\n      input: {\n        Inscriptio_LocationLat,\n        Inscriptio_LocationLon,\n        Inscriptio_Notes,\n        clientMutationId,\n      },\n    },\n\n    updater( store ) {\n      const payload = store.getRootField( 'InscriptioAdd' )\n      sharedUpdater( store, user, payload.getLinkedRecord( 'InscriptiosEdge' ) )\n    },\n\n    optimisticUpdater( store ) {\n      const id = `client:InscriptioAdd:Inscriptio:${clientMutationId}`\n      const aInscriptio = store.create( id, 'Inscriptio' )\n      aInscriptio.setValue( Inscriptio_LocationLat, 'Inscriptio_LocationLat' )\n      aInscriptio.setValue( Inscriptio_LocationLon, 'Inscriptio_LocationLon' )\n      aInscriptio.setValue( Inscriptio_Notes, 'Inscriptio_Notes' )\n      aInscriptio.setValue( id, 'id' )\n\n      const InscriptiosEdge = store.create(\n        `client:InscriptioAdd:InscriptiosEdge:${clientMutationId}`,\n        'InscriptiosEdge'\n      )\n      InscriptiosEdge.setLinkedRecord( aInscriptio, 'node' )\n\n      sharedUpdater( store, user, InscriptiosEdge )\n    },\n  })\n}\n\nexport default { commit }\n"]}