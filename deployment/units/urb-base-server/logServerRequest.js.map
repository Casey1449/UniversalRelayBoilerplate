{"version":3,"sources":["../../../units/urb-base-server/logServerRequest.js"],"names":["logServerRequest","req","res","next","loggingFunction","oldWriteRes","write","oldEndRes","end","chunksRes","chunk","push","Buffer","apply","arguments","responseBody","concat","toString","clientIP","headers","connection","remoteAddress","user","codeFoundriesInjected","requestAndResponse","cookies","query","body","response"],"mappings":";;;AAGwBA,gB,EAHxB;AAEA;AACe,SAASA,gBAAT,CAA2BC,GAA3B,EAAgCC,GAAhC,EAAqCC,IAArC,EAA2CC,eAA3C,EAA6D,CAC1E,MAAMC,cAAcH,IAAII,KAAxB,CACA,MAAMC,YAAYL,IAAIM,GAAtB;;AAEA,QAAMC,YAAY,EAAlB;;AAEAP,MAAII,KAAJ,GAAY,UAAUI,KAAV,EAAkB;AAC5BD,cAAUE,IAAV,CAAgB,IAAIC,MAAJ,CAAYF,KAAZ,CAAhB;AACAL,gBAAYQ,KAAZ,CAAmBX,GAAnB,EAAwBY,SAAxB;AACD,GAHD;;AAKAZ,MAAIM,GAAJ,GAAU,UAAUE,KAAV,EAAkB;AAC1B,QAAKA,KAAL,EAAaD,UAAUE,IAAV,CAAgB,IAAIC,MAAJ,CAAYF,KAAZ,CAAhB;;AAEb,QAAIK,eAAeH,OAAOI,MAAP,CAAeP,SAAf,EAA2BQ,QAA3B,CAAqC,MAArC,CAAnB;;AAEA;AACA,UAAMC,WAAWjB,IAAIkB,OAAJ,CAAY,WAAZ,KAA4BlB,IAAImB,UAAJ,CAAeC,aAA5D;;AAEA,QAAIC,IAAJ;AACA,QAAKpB,IAAIqB,qBAAJ,IAA6BrB,IAAIqB,qBAAJ,CAA0BD,IAA5D;AACEA,WAAOpB,IAAIqB,qBAAJ,CAA0BD,IAAjC,CADF;AAEKA,WAAO,gBAAP;;AAEL,UAAME,qBAAqB;AACzBL,eAASlB,IAAIkB,OADY;AAEzBM,eAASxB,IAAIwB,OAFY;AAGzBH,YAAMA,IAHmB;AAIzBI,aAAOzB,IAAI0B,IAJc;AAKzBC,gBAAUb,YALe;AAMzBG,cANyB,EAA3B;;;AASAd,oBAAiBoB,kBAAjB;;AAEAjB,cAAUM,KAAV,CAAiBX,GAAjB,EAAsBY,SAAtB;AACD,GAzBD;;AA2BAX;AACD","file":"logServerRequest.js","sourcesContent":["// @flow weak\n\n// Function to log requests\nexport default function logServerRequest( req, res, next, loggingFunction ) {\n  const oldWriteRes = res.write\n  const oldEndRes = res.end\n\n  const chunksRes = []\n\n  res.write = function( chunk ) {\n    chunksRes.push( new Buffer( chunk ) )\n    oldWriteRes.apply( res, arguments )\n  }\n\n  res.end = function( chunk ) {\n    if ( chunk ) chunksRes.push( new Buffer( chunk ) )\n\n    var responseBody = Buffer.concat( chunksRes ).toString( 'utf8' )\n\n    // Determine client ID - either placed in the headers by Nginx, or the IP the request is coming from\n    const clientIP = req.headers['x-real-ip'] || req.connection.remoteAddress\n\n    let user\n    if ( res.codeFoundriesInjected && res.codeFoundriesInjected.user )\n      user = res.codeFoundriesInjected.user\n    else user = 'not determined'\n\n    const requestAndResponse = {\n      headers: req.headers,\n      cookies: req.cookies,\n      user: user,\n      query: req.body,\n      response: responseBody,\n      clientIP,\n    }\n\n    loggingFunction( requestAndResponse )\n\n    oldEndRes.apply( res, arguments )\n  }\n\n  next()\n}\n"]}