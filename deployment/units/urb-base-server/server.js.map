{"version":3,"sources":["../../../units/urb-base-server/server.js"],"names":["require","load","port","process","env","PORT","Error","host","HOST","log","name","version","NODE_ENV","PUBLIC_URL","process_title","title","process_pid","pid","local_ip","server","use","req","res","next","setHeader","set","static","resolve","__dirname","maxAge","initializePersisters","listen","startDevelopmentServer","localIPDevelopmentServer","console"],"mappings":";;;AAGA;;AAEA,0B;;AAEA,gC;AACA,wC;AACA,2C;;AAEA;AACA,6D;AACA,oF;;AAEA,wC;AACA,wC;AACA,8C;AACA,8C;AACA,0B;AACA,sD;;;;;AAKAA,QAAS,QAAT,EAAoBC,IAApB;;AAEA,GAAMC,MAAOC,QAAQC,GAAR,CAAYC,IAAzB;AACA,GAAKH,MAAQ,IAAR,EAAgB,MAAOA,KAAP,GAAgB,QAArC;AACE,KAAM,IAAII,MAAJ;AACJ,gFADI,CAAN;;;AAIF,GAAMC,MAAOJ,QAAQC,GAAR,CAAYI,IAAzB;AACA,GAAKD,MAAQ,IAAR,EAAgB,MAAOA,KAAP,GAAgB,QAArC;AACE,KAAM,IAAID,MAAJ;AACJ,gFADI,CAAN;;;;AAKF,cAAIG,GAAJ,CAAS,MAAT,CAAiB,sBAAjB,CAAyC;AACvCC,kBADuC;AAEvCC,wBAFuC;;AAIvCC,SAAUT,QAAQC,GAAR,CAAYQ,QAJiB;AAKvCJ,KAAML,QAAQC,GAAR,CAAYI,IALqB;AAMvCH,KAAMF,QAAQC,GAAR,CAAYC,IANqB;AAOvCQ,WAAYV,QAAQC,GAAR,CAAYS,UAPe;;AASvCC,cAAeX,QAAQY,KATgB;AAUvCC,YAAab,QAAQc,GAVkB;AAWvCC,SAAU,0BAX6B,CAAzC;;;;AAeA,GAAMC,QAAS,uBAAf;;;AAGAA,OAAOC,GAAP,CAAY,SAAUC,GAAV,CAAeC,GAAf,CAAoBC,IAApB,CAA2B;;AAErCD,IAAIE,SAAJ,CAAe,6BAAf,CAA8CrB,QAAQC,GAAR,CAAYS,UAA1D;;AAEAS,IAAIE,SAAJ;AACE,8BADF;AAEE,wCAFF;;;AAKAF,IAAIE,SAAJ,CAAe,8BAAf,CAA+C,+BAA/C;;;AAGAF,IAAIE,SAAJ,CAAe,kCAAf,CAAmD,IAAnD;;AAEAD;AACD,CAfD;;;AAkBAJ,OAAOM,GAAP,CAAY,aAAZ,CAA2B,UAA3B;AACAN,OAAOM,GAAP,CAAY,cAAZ,CAA4B,KAA5B;AACAN,OAAOC,GAAP,CAAY,2BAAZ;AACAD,OAAOC,GAAP,CAAY,4BAAZ;;;AAGAD,OAAOC,GAAP,CAAY,UAAZ;;;AAGAD,OAAOC,GAAP,CAAY,OAAZ;;;AAGAD,OAAOC,GAAP,CAAY,UAAZ;;;AAGAD,OAAOC,GAAP;AACE,kBAAQM,MAAR;AACE,eAAKC,OAAL;AACEC,UAAY,kDADd,CADF;;AAIE;AACEC,OAAQ,IAAM,QADhB,CAJF,CADF;;;;;;AAYA,+BAAkBV,MAAlB;;;AAGAA,OAAOC,GAAP;;;AAGA,wBAAcU,oBAAd,CAAoC,KAApC,CAA2C,UAAM;;;AAG/C,GAAK3B,QAAQC,GAAR,CAAYQ,QAAZ,GAAyB,YAA9B,CAA6C;;AAE3CO,OAAOY,MAAP,CAAe7B,IAAf,CAAqBK,IAArB;AACD,CAHD,IAGO;;AAELyB,uBAAwB9B,IAAxB,CAA8B,WAA9B;;;AAGA,GAAKK,OAAS,WAAd,CAA4ByB,uBAAwB9B,IAAxB,CAA8BK,IAA9B;AAC7B;AACF,CAbD;;AAeA,QAASyB,uBAAT,CAAiC9B,IAAjC,CAAuCK,IAAvC,CAA8C;AAC5C,GAAM0B,0BAA2B,uBAAjC;AACAA,yBAAyBb,GAAzB,CAA8BD,MAA9B;AACAc,yBAAyBF,MAAzB,CAAiC7B,IAAjC,CAAuCK,IAAvC;AACA2B,QAAQzB,GAAR,CAAa,uCAAyCF,IAAtD;AACD","file":"server.js","sourcesContent":["// @flow\n\n// In order to use ES7 async/await\nimport 'babel-polyfill'\n\nimport path from 'path'\n\nimport express from 'express'\nimport compression from 'compression'\nimport cookieParser from 'cookie-parser'\n\nimport { name, version } from '../_configuration/package'\nimport serverWebApp from '../urb-base-webapp/serverWebApp'\nimport serverExtensions from '../_configuration/urb-base-server/serverExtensions'\n\nimport serverAuth from './serverAuth' // Authentication server\nimport getLocalIP from './getLocalIP'\nimport graphql from './serverGraphQL' // GraphQL server\nimport serverHealthz from './serverHealthz' // Health check endpoint server\nimport log from './log'\nimport ObjectManager from './graphql/ObjectManager'\n\n//\n\n// Read environment\nrequire( 'dotenv' ).load()\n\nconst port = process.env.PORT\nif ( port == null || typeof port !== 'string' )\n  throw new Error(\n    'ðŸ’”  urb-base-server/server.js requires the environment variable PORT to be set'\n  )\n\nconst host = process.env.HOST\nif ( host == null || typeof host !== 'string' )\n  throw new Error(\n    'ðŸ’”  urb-base-server/server.js requires the environment variable HOST to be set'\n  )\n\n// Log startup information\nlog.log( 'info', 'Starting application', {\n  name: name,\n  version: version,\n\n  NODE_ENV: process.env.NODE_ENV,\n  HOST: process.env.HOST,\n  PORT: process.env.PORT,\n  PUBLIC_URL: process.env.PUBLIC_URL,\n\n  process_title: process.title,\n  process_pid: process.pid,\n  local_ip: getLocalIP(),\n})\n\n// Main router\nconst server = express()\n\n// Add headers\nserver.use( function( req, res, next ) {\n  // Website you wish to allow to connect\n  res.setHeader( 'Access-Control-Allow-Origin', process.env.PUBLIC_URL )\n  // Request methods you wish to allow\n  res.setHeader(\n    'Access-Control-Allow-Methods',\n    'GET, POST, OPTIONS, PUT, PATCH, DELETE'\n  )\n  // Request headers you wish to allow\n  res.setHeader( 'Access-Control-Allow-Headers', 'X-Requested-With,content-type' )\n  // Set to true if you need the website to include cookies in the requests sent\n  // to the API (e.g. in case you use sessions)\n  res.setHeader( 'Access-Control-Allow-Credentials', true )\n  // Pass to next layer of middleware\n  next()\n})\n\n// Configure main router\nserver.set( 'trust proxy', 'loopback' )\nserver.set( 'x-powered-by', false )\nserver.use( compression() )\nserver.use( cookieParser() )\n\n// GraphQL server\nserver.use( '/graphql', graphql )\n\n// Authentication server\nserver.use( '/auth', serverAuth )\n\n// Health check endpoint\nserver.use( '/healthz', serverHealthz )\n\n// Staticpublic files server\nserver.use(\n  express.static(\n    path.resolve(\n      __dirname + '/../_configuration/urb-base-server/public_files/'\n    ),\n    {\n      maxAge: 365 * 86400000, // one year\n    }\n  )\n)\n\n// Add extensions - custom routes\nserverExtensions( server )\n\n// Application with routes\nserver.use( serverWebApp )\n\n// Set up all persisters\nObjectManager.initializePersisters( false, () => {\n  // Serve - work differently in development and production. In production only the\n  // specified host serves\n  if ( process.env.NODE_ENV === 'production' ) {\n    // Production - serve as told\n    server.listen( port, host )\n  } else {\n    // Development server - localhost. Always run on localhost\n    startDevelopmentServer( port, '127.0.0.1' )\n\n    // Development server - on a specific IP, if different from localhost\n    if ( host !== '127.0.0.1' ) startDevelopmentServer( port, host )\n  }\n})\n\nfunction startDevelopmentServer( port, host ) {\n  const localIPDevelopmentServer = express()\n  localIPDevelopmentServer.use( server )\n  localIPDevelopmentServer.listen( port, host )\n  console.log( 'â˜„  DEVELOPMENT. Server listening on ' + host )\n}\n"]}