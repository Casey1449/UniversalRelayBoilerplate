{"version":3,"sources":["../../../../units/urb-base-server/graphql/ObjectManager.js"],"names":["getObjectManager","User_0","Object","assign","id","uuidNull","UserToken2","User_DisplayName","entityDefinitions","setPersisters","Set","deletedRecord","deleted","ObjectManager","constructor","loadersSingle","loadersMultiple","changes","Viewer_User_id","request","siteInformation","site_id","registerEntity","entityName","EntityType","persister","Error","add","EntityName","Persister","TriggersForAdd","TriggersForUpdate","TriggersForRemove","TriggersForUpdateShouldRetrieveCurrentRecord","RegisterTriggerForAdd","handler","push","RegisterTriggerForUpdate","shouldRetrieveCurrentRecord","RegisterTriggerForAddAndUpdate","RegisterTriggerForRemove","setViewerUserId","setRequest","req","res","response","setSiteInformation","getLoadersSingle","foundLoaders","getLoadersMultiple","clearLoadersMultiple","recordChange","fields","isDeletion","records","getViewerUserId","getRequest","getLoader","fieldName","multipleResults","entityDefinition","entityType","loadersList","loader","filter","getObjectList","getOneObject","uuidNullAsString","Promise","resolve","loaderIdentifier","keys","sort","join","load","then","result","change","arrResults","ix","length","splice","invalidateLoaderCache","loaderFieldName","clear","executeTriggers","arrTriggers","oldFields","arrPromises","trigger","all","assignPrimaryKey","console","log","uuidRandom","toString","update","ensure","keyFields","ensureFields","entity","ensuredFieldName","isMatchingValue","endsWith","uuidToString","uuidEquals","remove","cursorForObjectInConnection","arr","obj","obj_id","arr_element_id","cursor","initializePersisters","runAsPartOfSetupDatabase","cb","initialize","objectManager"],"mappings":"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","file":"ObjectManager.js","sourcesContent":["// @flow\n\nimport DataLoader from 'dataloader'\nimport { cursorForObjectInConnection } from 'graphql-relay'\n\nimport UserToken2Anonymous from '../../_configuration/urb-base-server/UserToken2Anonymous'\nimport defaultPersister from '../../_configuration/urb-base-server/graphql/defaultPersister'\nimport getNewUser from '../../_configuration/urb-base-server/graphql/model/getNewUser'\nimport { getSiteInformation } from '../../_configuration/urb-base-server/siteSettings'\nimport log from '../log'\nimport User from '../../_configuration/urb-base-server/graphql/model/User'\n\n// Anonymous user\nconst User_0 = new User(\n  Object.assign( getNewUser( '00000000-0000-0000-0000-000000000000' ), {\n    id: defaultPersister.uuidNull(),\n    UserToken2: UserToken2Anonymous,\n    User_DisplayName: 'Anonymous',\n  })\n)\n\n// Static set of entity definitions\nconst entityDefinitions = {}\n\n// Static array of object managers\nconst setPersisters = new Set()\n\n// Value for a change indicating that the record is deleted\nconst deletedRecord = {\n  deleted: true,\n}\n\nexport default class ObjectManager {\n  loadersSingle: Object\n  Viewer_User_id: ?string\n  loadersMultiple: Object\n  changes: Object\n  request: ?Object\n  response: ?Object\n  User_0: User\n  siteInformation: { site_id: string }\n\n  constructor() {\n    // Loaders for a single record, by entity name\n    this.loadersSingle = {}\n\n    // Loaders for a multiple record lists, by entity name\n    this.loadersMultiple = {}\n\n    // Changes made to records, by entity name\n    this.changes = {}\n\n    // UserID for the viewer. Could be unset if ObjectManager is used by system\n    this.Viewer_User_id = null\n\n    // Request object, if available\n    this.request = null\n\n    // Anonymous user available as property, for comparisons\n    this.User_0 = User_0\n\n    // Setting site information mostly to satify flow;\n    // also, in order to be able to detect errors when not set better\n    this.siteInformation = {\n      site_id: 'site_id has not been set. Invalid site_id!',\n    }\n  }\n\n  static registerEntity(\n    entityName: string,\n    EntityType: any,\n    persister: any\n  ): void {\n    if ( entityName in entityDefinitions )\n      throw new Error( 'Entity already registered: ' + entityName )\n\n    // In order to be able to access the name as a static property of the type\n    EntityType.entityName = entityName\n\n    // Determine persister - default, or otherwise\n    if ( persister == null ) persister = defaultPersister\n\n    // A set would retain only one copy of a persister\n    setPersisters.add( persister )\n\n    entityDefinitions[entityName] = {\n      EntityName: entityName,\n      EntityType: EntityType,\n      Persister: persister,\n      TriggersForAdd: [],\n      TriggersForUpdate: [],\n      TriggersForRemove: [],\n      TriggersForUpdateShouldRetrieveCurrentRecord: false,\n    }\n  }\n\n  static RegisterTriggerForAdd( entityName: string, handler: Function ): void {\n    entityDefinitions[entityName].TriggersForAdd.push( handler )\n  }\n\n  static RegisterTriggerForUpdate(\n    entityName: string,\n    handler: Function,\n    shouldRetrieveCurrentRecord: boolean\n  ): void {\n    entityDefinitions[entityName].TriggersForUpdate.push( handler )\n\n    if ( shouldRetrieveCurrentRecord )\n      entityDefinitions[\n        entityName\n      ].TriggersForUpdateShouldRetrieveCurrentRecord = true\n  }\n\n  static RegisterTriggerForAddAndUpdate(\n    entityName: string,\n    handler: Function\n  ): void {\n    ObjectManager.RegisterTriggerForAdd( entityName, handler )\n    ObjectManager.RegisterTriggerForUpdate( entityName, handler, false )\n  }\n\n  static RegisterTriggerForRemove( entityName: string, handler: any ) {\n    entityDefinitions[entityName].TriggersForRemove.push( handler )\n  }\n\n  setViewerUserId( Viewer_User_id: string ): void {\n    this.Viewer_User_id = Viewer_User_id\n  }\n\n  setRequest( req: any, res: any ): void {\n    this.request = req\n    this.response = res\n  }\n\n  setSiteInformation( siteInformation: Object ): void {\n    this.siteInformation = siteInformation\n  }\n\n  getLoadersSingle( entityName: string ) {\n    const foundLoaders = this.loadersSingle[entityName]\n    if ( foundLoaders != null ) return foundLoaders\n    else return ( this.loadersSingle[entityName] = {})\n  }\n\n  getLoadersMultiple( entityName: string ) {\n    const foundLoaders = this.loadersMultiple[entityName]\n    if ( foundLoaders != null ) return foundLoaders\n    else return ( this.loadersMultiple[entityName] = {})\n  }\n\n  clearLoadersMultiple( entityName: string ) {\n    this.loadersMultiple[entityName] = {}\n  }\n\n  recordChange( entityName: string, fields: Object, isDeletion: boolean ) {\n    let records = this.changes[entityName]\n    if ( records == null ) records = this.changes[entityName] = {}\n\n    const id = fields.id\n\n    records[id] = isDeletion ? deletedRecord : fields\n  }\n\n  getViewerUserId(): string {\n    if ( this.Viewer_User_id == null )\n      throw new Error( 'Object Manager: viewer user id has not been set' )\n\n    return this.Viewer_User_id\n  }\n\n  getRequest(): any {\n    if ( this.request == null )\n      throw new Error( 'Object Manager: request has not been set' )\n\n    return this.request\n  }\n\n  getLoader( entityName: string, fieldName: string, multipleResults: boolean ) {\n    if ( !( entityName in entityDefinitions ) )\n      throw new Error( 'Can not find entity type named ' + entityName )\n\n    const entityDefinition = entityDefinitions[entityName]\n    const entityType = entityDefinition.EntityType\n\n    let loadersList = multipleResults\n      ? this.getLoadersMultiple( entityName )\n      : this.getLoadersSingle( entityName )\n    let loader = loadersList[fieldName]\n    if ( loader == null ) {\n      if ( multipleResults )\n        loader = new DataLoader( filter =>\n          entityDefinition.Persister.getObjectList(\n            entityName,\n            entityType,\n            filter\n          )\n        )\n      else\n        loader = new DataLoader( filter =>\n          entityDefinition.Persister.getOneObject(\n            entityName,\n            entityType,\n            filter\n          )\n        )\n\n      loadersList[fieldName] = loader\n    }\n\n    return loader\n  }\n\n  getOneObject( entityName: string, filter: Object ): Promise<User> {\n    // TODO x2000 Provide try catch with logging here!\n    // Special hack for anonymous users\n    if ( entityName === 'User' )\n      if ( filter.id == defaultPersister.uuidNullAsString() )\n        return Promise.resolve( User_0 )\n\n    // For all non-user, non 0 ids, load from data loader per protocol\n    const loaderIdentifier = Object.keys( filter )\n      .sort()\n      .join( ',' )\n    const loader = this.getLoader( entityName, loaderIdentifier, false )\n\n    return loader.load( filter ).then( result => {\n      const changes = this.changes[entityName]\n      if ( changes ) {\n        // $FlowIssue - by convention all entity objects are expected to have an id\n        const change = changes[result.id]\n        if ( change != null ) {\n          if ( change === deletedRecord )\n            result = null // Object is not found, return null // Add or update\n          else Object.assign( result, change )\n        }\n      }\n      return result\n    })\n  }\n\n  getObjectList( entityName: string, filter: Object ) {\n    // TODO x2000 Provide try catch with logging here!\n    const loaderIdentifier = Object.keys( filter )\n      .sort()\n      .join( ',' )\n    const loader = this.getLoader( entityName, loaderIdentifier, true )\n\n    return loader.load( filter ).then( arrResults => {\n      const changes = this.changes[entityName]\n      if ( changes ) {\n        for ( let ix = 0; ix < arrResults.length; ix++ ) {\n          const change = changes[arrResults[ix].id]\n          if ( change != null ) {\n            if ( change === deletedRecord )\n              arrResults.splice( ix--, 1 ) // Reduce ix in order not to skip over a record // Add or update\n            else Object.assign( arrResults[ix], change )\n          }\n        }\n      }\n      return arrResults\n    })\n  }\n\n  invalidateLoaderCache( entityName: string, fields: any ) {\n    // At this moment there is no obvious way of knowing what to clear from lists, so delete them all\n    this.clearLoadersMultiple( entityName )\n\n    const loadersSingle = this.getLoadersSingle( entityName )\n    for ( let loaderFieldName in loadersSingle ) {\n      if ( loaderFieldName === 'id' )\n        loadersSingle[loaderFieldName].clear( fields.id )\n      else delete loadersSingle[loaderFieldName]\n    }\n  }\n\n  executeTriggers(\n    arrTriggers: Array<Function>,\n    fields: Object,\n    oldFields: ?Object\n  ) {\n    const arrPromises = []\n    for ( let trigger of arrTriggers ) {\n      arrPromises.push( trigger( this, fields, oldFields ) )\n    }\n\n    return Promise.all( arrPromises )\n  }\n\n  assignPrimaryKey( entityName: string, fields: any ) {\n    const entityDefinition = entityDefinitions[entityName]\n\n    if ( entityDefinition == null )\n      console.log( 'Cound not find entity ' + entityName )\n\n    // Generate primary key, overwrite if already present\n    fields.id = entityDefinition.Persister.uuidRandom()\n  }\n\n  async add( entityName: string, fields: any ): any {\n    const entityDefinition = entityDefinitions[entityName]\n\n    if ( entityDefinition == null )\n      console.log( 'Cound not find entity ' + entityName )\n\n    // Generate primary key, if not already present\n    if ( !fields.id ) fields.id = entityDefinition.Persister.uuidRandom()\n\n    // If this is a user ID\n    if ( entityName === 'User' ) this.setViewerUserId( fields.id.toString() )\n\n    this.recordChange( entityName, fields, false )\n    await this.executeTriggers( entityDefinition.TriggersForAdd, fields )\n\n    await entityDefinition.Persister.add(\n      entityName,\n      fields,\n      entityDefinition.EntityType\n    )\n\n    this.invalidateLoaderCache( entityName, fields )\n\n    return fields.id\n  }\n\n  async update( entityName: string, fields: any ): Promise<void> {\n    const entityDefinition = entityDefinitions[entityName]\n\n    if ( entityDefinition == null )\n      console.log( '💔  XXX Cound not find entity' + entityName ) // Should that be recorded somewhere? Could be another\n\n    let oldFields = null\n    if ( entityDefinition.TriggersForUpdateShouldRetrieveCurrentRecord ) {\n      oldFields = this.getOneObject( entityName, {\n        id: fields.id,\n      })\n    }\n\n    this.recordChange( entityName, fields, false )\n    await this.executeTriggers(\n      entityDefinition.TriggersForUpdate,\n      fields,\n      oldFields\n    )\n\n    await entityDefinition.Persister.update( entityName, fields )\n\n    this.invalidateLoaderCache( entityName, fields )\n  }\n\n  async ensure(\n    entityName: string,\n    keyFields: Object,\n    ensureFields: Object\n  ): Promise<Object> {\n    const entityDefinition = entityDefinitions[entityName]\n\n    const entity = await this.getOneObject( entityName, keyFields )\n\n    for ( let ensuredFieldName of Object.keys( ensureFields ) ) {\n      let isMatchingValue = false\n      if ( ensuredFieldName.endsWith( 'site_id' ) ) {\n        if ( !entity.site_id )\n          throw new Error(\n            'ensuredFieldName = ' +\n              ensuredFieldName +\n              ', however the entity does not have field site_id'\n          )\n        isMatchingValue =\n          entityDefinition.Persister.uuidToString( entity.site_id ) ===\n          ensureFields.site_id\n      } else if ( ensuredFieldName.endsWith( '_id' ) ) {\n        isMatchingValue = entityDefinition.Persister.uuidEquals(\n          ensureFields[ensuredFieldName],\n          // $FlowIssue by convention the field should be present\n          entity[ensuredFieldName]\n        )\n      } else {\n        isMatchingValue =\n          // $FlowIssue by convention the field should be present\n          ensureFields[ensuredFieldName] === entity[ensuredFieldName]\n      }\n\n      if ( !isMatchingValue )\n        throw new Error(\n          '💔  Field value can not be ensured for field ' +\n            ensuredFieldName +\n            ' of ' +\n            entityName\n        )\n    }\n\n    return entity\n  }\n\n  async remove( entityName: string, fields: Object ): Promise<void> {\n    const entityDefinition = entityDefinitions[entityName]\n\n    this.recordChange( entityName, fields, true )\n    await this.executeTriggers( entityDefinition.TriggersForRemove, fields )\n\n    await entityDefinition.Persister.remove( entityName, fields )\n\n    this.invalidateLoaderCache( entityName, fields )\n  }\n\n  cursorForObjectInConnection(\n    entityName: string,\n    arr: Array<Object>,\n    obj: Object\n  ) {\n    const entityDefinition = entityDefinitions[entityName]\n\n    // IDs can be both strings and Uuid. Check that first, and convert to String\n    const obj_id = entityDefinition.Persister.uuidToString( obj.id )\n\n    // Make sure that the object and its instance can be compared with ===\n    // assumed that the object has id field which is unique\n    for ( let ix = 0; ix < arr.length; ix++ ) {\n      const arr_element_id = entityDefinition.Persister.uuidToString( arr[ix].id )\n\n      if ( arr_element_id === obj_id ) {\n        arr[ix] = obj\n        break\n      }\n    }\n\n    let cursor = cursorForObjectInConnection( arr, obj )\n    if ( cursor == null )\n      log.log(\n        'error',\n        '💔  Could not create cursor for object in connection for ' +\n          entityName,\n        {\n          obj,\n          arr,\n        }\n      )\n\n    return cursor\n  }\n\n  static initializePersisters(\n    runAsPartOfSetupDatabase: boolean,\n    cb: Function\n  ): void {\n    console.log( '🚀 Initializing persisters - start ...' )\n\n    // TODO x8000 This should be re-done to work properly with more than one persister\n    for ( let persister of setPersisters )\n      persister.initialize( runAsPartOfSetupDatabase, () => {\n        console.log( '🏆 Initializing persisters - success.' )\n        cb()\n      })\n  }\n}\n\n// Register the user\nObjectManager.registerEntity( 'User', User )\n\n// Get an Object Manager with site information\nexport async function getObjectManager(\n  req: Object,\n  res: Object\n): Promise<ObjectManager> {\n  // Set site information\n  const siteInformation = await getSiteInformation( req, res )\n\n  // Create individual object manager for each request\n  const objectManager = new ObjectManager()\n\n  // Set request and response\n  objectManager.setRequest( req, res )\n\n  // Place site builder configuration into object manager\n  objectManager.setSiteInformation( siteInformation )\n\n  return objectManager\n}\n"]}