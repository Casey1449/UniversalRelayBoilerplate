{"version":3,"sources":["../../../units/urb-base-server/serverAuth.js"],"names":["require","load","serverAuth","use","json","req","res","next","login","objectManager","siteInformation","UserAccount_Identifier","body","toLowerCase","User_Secret","arr_UserAccount","getObjectList","UserAccount_site_id","site_id","length","status","error","a_User","getOneObject","id","UserAccount_User_id","Promise","resolve","compare","err","passwordMatch","a_UserSession","UserSession_site_id","UserSession_User_id","UserSession_Start","Date","UserSession_Expired","add","codeFoundriesInjected","user","UserToken1","encode","session_id","process","env","JWT_SECRET","cookie","httpOnly","success","UserToken2","message","post","createuser","Error","User_PasswordHash","hash","accountNameIsValidEmail","User_Email","Object","assign","User_site_id","Math","random","toString","substring","User_DisplayName","assignPrimaryKey","a_UserAccount","UserAccount_Type","all","UserSession","remove","expires"],"mappings":"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","file":"serverAuth.js","sourcesContent":["// @flow\n\nimport bcryptjs from 'bcryptjs'\nimport bodyParser from 'body-parser'\nimport express from 'express'\nimport jwt from 'jwt-simple'\n\nimport authExtensions from '../_configuration/urb-base-server/authExtensions'\nimport delayPromise from '../urb-base-universal/delayPromise'\nimport getNewUser from '../_configuration/urb-base-server/graphql/model/getNewUser'\nimport { validateEmail } from '../urb-base-universal/validation'\nimport { requestLoggerAuth } from '../_configuration/urb-base-server/requestLoggers'\n\nimport { getUserAndSessionIDByUserToken1 } from './checkCredentials'\nimport logServerRequest from './logServerRequest'\nimport { getObjectManager } from './graphql/ObjectManager'\n\n// Read environment\nrequire( 'dotenv' ).load()\n\nconst serverAuth = express()\n\nserverAuth.use( bodyParser.json() )\nserverAuth.use( ( req, res, next ) =>\n  logServerRequest( req, res, next, requestLoggerAuth )\n)\n\n//\n\nasync function login( req, res ) {\n  const objectManager = await getObjectManager( req, res )\n  if ( objectManager.siteInformation ) {\n    const UserAccount_Identifier = req.body.UserAccount_Identifier.toLowerCase()\n    const User_Secret = req.body.User_Secret\n\n    await delayPromise( 1000 ) // Wait for a second to hamper a possible potential brute force attack\n\n    try {\n      const arr_UserAccount = await objectManager.getObjectList( 'UserAccount', {\n        UserAccount_site_id: objectManager.siteInformation.site_id,\n        UserAccount_Identifier: UserAccount_Identifier,\n      })\n\n      if ( arr_UserAccount.length === 0 ) {\n        res.status( 401 ).json({ error: 'ðŸ’”  User account not found' })\n      } else {\n        const a_User = await objectManager.getOneObject( 'User', {\n          id: arr_UserAccount[0].UserAccount_User_id,\n        })\n\n        if (\n          await new Promise( resolve =>\n            bcryptjs.compare(\n              User_Secret,\n              a_User.User_Secret,\n              ( err, passwordMatch ) => resolve( passwordMatch )\n            )\n          )\n        ) {\n          // Create user session object\n          const a_UserSession = {\n            UserSession_site_id: objectManager.siteInformation.site_id, // Get previously assigned primary key\n            UserSession_User_id: a_User.id,\n            UserSession_Start: new Date(),\n            UserSession_Expired: false,\n          }\n\n          // Addsession to database\n          objectManager.add( 'UserSession', a_UserSession )\n\n          res.codeFoundriesInjected = { user: a_User }\n\n          // User has authenticated correctly thus we create a JWT token ith the session.\n          const UserToken1 = jwt.encode(\n            // $FlowIssue - id will be filled in by ObjectManager.add\n            { session_id: a_UserSession.id },\n            process.env.JWT_SECRET\n          )\n\n          res.cookie( 'UserToken1', UserToken1, { httpOnly: true })\n          res.json({ success: true, UserToken2: a_User.UserToken2 })\n        } else res.status( 401 ).json({ error: 'ðŸ’”  Incorrect password' })\n      }\n    } catch ( error ) {\n      res.status( 401 ).json({ error: error.message })\n    }\n  }\n}\nserverAuth.post( '/login', login )\n\n//\n\nasync function createuser( req, res ) {\n  const objectManager = await getObjectManager( req, res )\n  if ( objectManager.siteInformation ) {\n    const UserAccount_Identifier = req.body.UserAccount_Identifier.toLowerCase()\n    const User_Secret = req.body.User_Secret\n\n    try {\n      const arr_UserAccount = await objectManager.getObjectList( 'UserAccount', {\n        UserAccount_site_id: objectManager.siteInformation.site_id,\n        UserAccount_Identifier: UserAccount_Identifier,\n      })\n\n      if ( arr_UserAccount.length > 0 )\n        throw new Error( 'ðŸ’”  User account already exists' )\n\n      const User_PasswordHash = await new Promise( resolve =>\n        bcryptjs.hash( User_Secret, 8, ( err, hash ) => resolve( hash ) )\n      )\n\n      // If account name looks like email address, use it as email\n      const accountNameIsValidEmail = validateEmail( UserAccount_Identifier )\n      const User_Email = accountNameIsValidEmail ? UserAccount_Identifier : ''\n\n      // Create the user object\n      const a_User = Object.assign(\n        getNewUser( objectManager.siteInformation.site_id ),\n        {\n          User_site_id: objectManager.siteInformation.site_id,\n          UserToken2:\n            Math.random()\n              .toString( 36 )\n              .substring( 2 ) +\n            Math.random()\n              .toString( 36 )\n              .substring( 2 ),\n          User_Secret: User_PasswordHash,\n          User_DisplayName: UserAccount_Identifier,\n          User_Email: User_Email,\n        }\n      )\n      objectManager.assignPrimaryKey( 'User', a_User )\n\n      // Create user session object\n      const a_UserSession = {\n        UserSession_site_id: objectManager.siteInformation.site_id, // Get previously assigned primary key\n        UserSession_User_id: a_User.id,\n        UserSession_Start: new Date(),\n        UserSession_Expired: false,\n      }\n\n      // Create user account object\n      const a_UserAccount = {\n        UserAccount_site_id: objectManager.siteInformation.site_id, // Get previously assigned primary key\n        UserAccount_User_id: a_User.id,\n        UserAccount_Identifier: UserAccount_Identifier,\n        UserAccount_Type: 'un',\n      }\n\n      // Add user and session to database\n      await Promise.all([\n        objectManager.add( 'User', a_User ),\n        objectManager.add( 'UserSession', a_UserSession ),\n        objectManager.add( 'UserAccount', a_UserAccount ),\n      ])\n\n      res.codeFoundriesInjected = { user: a_User }\n\n      // User has been created thus we create a JWT token.\n      const UserToken1 = jwt.encode(\n        // $FlowIssue - id will be filled in by ObjectManager.add\n        { session_id: a_UserSession.id },\n        process.env.JWT_SECRET\n      )\n\n      // Set cookie and return\n      res.cookie( 'UserToken1', UserToken1, { httpOnly: true })\n      res.json({ success: true })\n    } catch ( error ) {\n      res.status( 401 ).json({ error: '' + error.message })\n    }\n  }\n}\nserverAuth.post( '/createuser', createuser )\n\n//\n\nserverAuth.post( '/logout', async( req, res ) => {\n  const objectManager = await getObjectManager( req, res )\n  const UserSession = ( await getUserAndSessionIDByUserToken1(\n    objectManager,\n    req\n  ) ).UserSession\n\n  await objectManager.remove( 'UserSession', { id: UserSession.id })\n\n  res.cookie( 'UserToken1', '', { httpOnly: true, expires: new Date( 1 ) })\n  res.json({ success: true })\n})\n\n// Add extensions - custom configurations\nauthExtensions( serverAuth )\n\nexport default serverAuth\n"]}