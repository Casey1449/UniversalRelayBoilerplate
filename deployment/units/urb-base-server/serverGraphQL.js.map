{"version":3,"sources":["../../../units/urb-base-server/serverGraphQL.js"],"names":["serverGraphQL","use","json","req","res","next","root","objectManager","siteInformation","a_User","User","codeFoundriesInjected","user","schema","rootValue","pretty","graphiql","log","status","send","JSON","stringify","error"],"mappings":";;AAEA,uC;AACA,gC;AACA,+C;;AAEA;;AAEA;;;;;AAKA,0B;AACA,oD;AACA;AACA,wC;;;AAGA,8D;;;AAGA,GAAMA,eAAgB,uBAAtB;;;AAGAA,cAAcC,GAAd,CAAmB,qBAAWC,IAAX,EAAnB;;;AAGAF,cAAcC,GAAd,CAAmB,SAAEE,GAAF,CAAOC,GAAP,CAAYC,IAAZ;AACjB,+BAAkBF,GAAlB,CAAuBC,GAAvB,CAA4BC,IAA5B,sCADiB,GAAnB;;;AAIA,QAAeC,KAAf,CAAqBH,GAArB,CAA0BC,GAA1B,CAA+BC,IAA/B;;AAEgC,oCAAkBF,GAAlB,CAAuBC,GAAvB,CAFhC,SAEUG,aAFV;AAGSA,cAAcC,eAHvB;;AAK+B;AACrBD,aADqB;AAErBJ,GAFqB,CAL/B,SAKcM,MALd;AAQYC,IARZ;;AAUQN,IAAIO,qBAAJ,CAA4B,CAAEC,KAAMH,MAAR,CAA5B,CAVR;AAWc,0CAAqBA,MAArB,CAA6BN,GAA7B,CAXd;;AAaQ,6BAAa,UAAM;AACjB,MAAO;AACLU,uBADK;AAELC,UAAWP,aAFN;AAGLQ,OAAQ,IAHH;AAILC,SAAU,IAJL,CAAP;;AAMD,CAPD,EAOIb,GAPJ,CAOSC,GAPT,CAOcC,IAPd,EAbR;;AAsBQ,gDAA2BF,GAA3B,CAAgCC,GAAhC,aAA0C,IAA1C,EAtBR;;;;AA0BI,cAAIa,GAAJ,CAAS,OAAT,CAAkB,gBAAlB;AACAb,IAAIc,MAAJ,CAAY,GAAZ,EAAkBC,IAAlB;AACEC,KAAKC,SAAL,CAAe;AACbC,MAAO,mDADM,CAAf,CADF,EA3BJ;;;;;AAkCAtB,cAAcC,GAAd,CAAmB,GAAnB,CAAwBK,IAAxB,E;;AAEeN,a","file":"serverGraphQL.js","sourcesContent":["// @flow\n\nimport bodyParser from 'body-parser'\nimport express from 'express'\nimport graphQLHTTP from 'express-graphql'\n\nimport { requestLoggerGraphQL } from '../_configuration/urb-base-server/requestLoggers'\n\nimport {\n  getUserAndSessionIDByUserToken1,\n  verifyUserAuthToken,\n  serveAuthenticationFailed,\n} from './checkCredentials'\nimport log from './log'\nimport logServerRequest from './logServerRequest'\nimport { getObjectManager } from './graphql/ObjectManager'\nimport schema from './graphql/schema' // Schema for GraphQL server\n\n// Guarantee that all object registrations and schema definitions are executed\nimport '../_configuration/urb-base-server/graphql/_schemas'\n\n// Create router for GraphQL\nconst serverGraphQL = express()\n\n// Set up parser\nserverGraphQL.use( bodyParser.json() )\n\n// Set up logging\nserverGraphQL.use( ( req, res, next ) =>\n  logServerRequest( req, res, next, requestLoggerGraphQL )\n)\n\nasync function root( req, res, next ) {\n  try {\n    const objectManager = await getObjectManager( req, res )\n    if ( objectManager.siteInformation ) {\n      try {\n        const a_User = ( await getUserAndSessionIDByUserToken1(\n          objectManager,\n          req\n        ) ).User\n\n        res.codeFoundriesInjected = { user: a_User }\n        await verifyUserAuthToken( a_User, req )\n\n        graphQLHTTP( () => {\n          return {\n            schema: schema,\n            rootValue: objectManager,\n            pretty: true,\n            graphiql: true,\n          }\n        })( req, res, next )\n      } catch ( err ) {\n        serveAuthenticationFailed( req, res, err, true )\n      }\n    }\n  } catch ( err ) {\n    log.log( 'error', 'Error: GraphQL', err )\n    res.status( 500 ).send(\n      JSON.stringify({\n        error: 'An error has occurred while running GraphQL query',\n      })\n    )\n  }\n}\nserverGraphQL.use( '/', root )\n\nexport default serverGraphQL\n"]}